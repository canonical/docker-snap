name: docker
#title: Docker
version: '24.0.5'
summary: Docker container runtime
description: |
  Build and run container images with Docker.

  **Usage**

  * This build can only access files in the home directory. So Dockerfiles and all other files used in commands like `docker build`, `docker save` and `docker load` need to be in $HOME.
  * You can change the configuration of this build by modifying the files in `/var/snap/docker/current/`.
  * Additional certificates used by the Docker daemon to authenticate with registries need to be added in `/var/snap/docker/current/etc/docker/certs.d` (instead of `/etc/docker/certs.d`). This directory can be accessed by other snaps using the `docker-registry-certificates` content interface.
  * Specifying the option `--security-opt="no-new-privileges=true"` with the `docker run` command (or the equivalent in docker-compose) will result in a failure of the container to start. This is due to an an underlying external constraint on AppArmor (see https://bugs.launchpad.net/snappy/+bug/1908448 for details).

  **Running Docker as normal user**

  By default, Docker is only accessible with root privileges (`sudo`). If you want to use docker as a regular user, you need to add your user to the `docker` group.

      sudo addgroup --system docker
      sudo adduser $USER docker
      newgrp docker
      sudo snap disable docker
      sudo snap enable docker

  **Warning:** if you add your user to the `docker` group, it will have similar power as the `root` user. For details on how this impacts security in your system, see https://docs.docker.com/engine/security/#docker-daemon-attack-surface

  **Authors**

  This snap is built by Canonical based on source code published by Docker, Inc. It is not endorsed or published by Docker, Inc.

  Docker and the Docker logo are trademarks or registered trademarks of Docker, Inc. in the United States and/or other countries. Docker, Inc. and other parties may also have trademark rights in other terms used herein.
license: (Apache-2.0 AND MIT AND GPL-2.0)
grade: stable

base: core22
confinement: strict

# Using passthrough until LP#2019931 is fixed
passthrough:
  assumes:
    - snapd2.59.1

layout:
  /etc/docker:
    bind: $SNAP_DATA/etc/docker
  # Container Device Interface (CDI) Support - https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#container-device-interface-cdi-support
  /etc/cdi:
    bind: $SNAP_DATA/etc/cdi
  /etc/nvidia-container-runtime:
    bind: $SNAP_DATA/etc/nvidia-container-runtime
  /etc/gitconfig:
    bind-file: $SNAP_DATA/etc/gitconfig
  /usr/libexec/docker/cli-plugins:
    symlink: $SNAP/usr/libexec/docker/cli-plugins

environment:
  GIT_EXEC_PATH: "$SNAP/usr/lib/git-core"
  GIT_TEMPLATE_DIR: "$SNAP/usr/share/git-core/templates"
  # For nvidia support #
  LD_LIBRARY_PATH:    $SNAP/graphics/lib/${CRAFT_ARCH_TRIPLET}:${SNAP}/lib/:${SNAP}/lib/${CRAFT_ARCH_TRIPLET}:${SNAP}/usr/lib/:${SNAP}/usr/lib/${CRAFT_ARCH_TRIPLET}
  LIBGL_DRIVERS_PATH: $SNAP/graphics/lib/${CRAFT_ARCH_TRIPLET}/dri
  LIBVA_DRIVERS_PATH: $SNAP/graphics/lib/${CRAFT_ARCH_TRIPLET}/dri

plugs:
  home:
    read: all
  removable-media:
  support:
    interface: docker-support
  privileged:
    interface: docker-support
    privileged-containers: true
  docker-cli:
    interface: docker
  opengl:
  # For nvidia userspace libs support #
  graphics-core22:
    interface: content
    target: $SNAP/graphics
    # Currently, this is the only relevant provider, but cannot be default as not supported on all archs #
    #default-provider: nvidia-core22
slots:
  config-ro:
    interface: content
    content: docker-config-ro
    read:
      - $SNAP_DATA/config
  docker-daemon:
    interface: docker
  docker-executables:
    content: docker-executables
    interface: content
    read:
      - .
  docker-registry-certificates:
    content: docker-registry-certificates
    interface: content
    write:
      - $SNAP_DATA/etc/docker/certs.d

apps:
  docker:
    command: bin/docker
    completer: bin/docker-completion.sh
    plugs:
      - docker-cli
      - network
      - home
      - removable-media

  dockerd:
    command: bin/dockerd-wrapper
    daemon: simple
    plugs:
      - firewall-control
      - home
      - log-observe
      - network-bind
      - network-control
      - privileged
      - support
      - graphics-core22
    slots:
      - docker-daemon

  compose:
    command: usr/libexec/docker/cli-plugins/docker-compose
    plugs:
      - docker-cli
      - network
      - home

  nvidia-container-toolkit:
    command: bin/nvidia-container-toolkit
    daemon: oneshot
    plugs:
      - graphics-core22
    before:
      - dockerd

  help:
    command: bin/help

parts:
  wrapper-scripts:
    plugin: dump
    source: .
    stage-packages:
      - mount
    stage:
      - bin/*
      - config/daemon.json
      - patches/*
    prime:
      - -bin/go-build-helper.sh
      - -patches/*
      - bin/*
      - config/daemon.json

  utils:
    plugin: nil
    stage-packages:
      - jq
      - pciutils

  engine:
    plugin: make
    source: https://github.com/moby/moby.git
    source-tag: v24.0.5
    source-depth: 1
    override-build: |
      $CRAFT_STAGE/patches/patch.sh

      # docker build specific environment variables
      export VERSION=$(craftctl get version)
      export DOCKER_GITCOMMIT=$(git rev-parse --short HEAD)
      export GITCOMMIT=$DOCKER_GITCOMMIT
      export DISABLE_WARN_OUTSIDE_CONTAINER=1
      export DOCKER_BUILDTAGS='apparmor seccomp selinux'

      # setup the go build environment for docker/docker
      . "$CRAFT_STAGE/bin/go-build-helper.sh"
      gopartbootstrap github.com/docker/docker

      # build the dockerd binary
      ./hack/make.sh dynbinary

      install -d "$CRAFT_PART_INSTALL/bin"
      install -T bundles/dynbinary-daemon/dockerd "$CRAFT_PART_INSTALL/bin/dockerd"
      # install docker-proxy previously provided by libnetwork part
      install -T bundles/dynbinary-daemon/docker-proxy "$CRAFT_PART_INSTALL/bin/docker-proxy"
    # https://github.com/moby/moby/blob/v24.0.5/Dockerfile.simple (Docker-supported Go version for Engine)
    build-snaps: &go ['go/1.20/stable']
    # we get weird behavior if we mix/match Go versions throughout this one snapcraft.yml, so we use a YAML reference here to ensure we're always consistent throughout
    after: [wrapper-scripts]
    build-packages:
      - btrfs-progs
      - gcc
      - git
      - libc6-dev
      - libdevmapper-dev
      - libltdl-dev
      - libsystemd-dev
      - patch
      - pkg-config
    stage-packages:
      - git
      - libltdl7
      - pigz
      - xz-utils
      - zfsutils-linux

  containerd:
    plugin: make
    source: https://github.com/containerd/containerd.git
    # from https://github.com/moby/moby/releases/tag/v24.0.5
    source-tag: v1.6.21
    source-depth: 1
    override-build: |
      make GIT_COMMIT= GIT_BRANCH= LDFLAGS=

      rm bin/containerd-stress

      install -d "$CRAFT_PART_INSTALL/bin"
      install -t "$CRAFT_PART_INSTALL/bin" bin/containerd* bin/ctr
    build-snaps: *go
    build-packages:
      - libbtrfs-dev

  runc:
    plugin: make
    source: https://github.com/opencontainers/runc.git
    # from https://github.com/moby/moby/releases/tag/v24.0.5
    source-tag: v1.1.7
    source-depth: 1
    override-build: |
      make BUILDTAGS='seccomp apparmor selinux' COMMIT=

      install -d "$CRAFT_PART_INSTALL/bin"
      install -T runc "$CRAFT_PART_INSTALL/bin/runc"
    build-snaps: *go
    build-packages:
      - libapparmor-dev
      - libseccomp-dev

  nvidia-container-toolkit:
    plugin: go
    source: https://github.com/NVIDIA/nvidia-container-toolkit.git
    source-tag: v1.13.5
    source-depth: 1
    override-pull: &arch-restrict |
      [ "${CRAFT_TARGET_ARCH}" != "amd64" ] && \
        [ "${CRAFT_TARGET_ARCH}" != "arm64" ] && \
        exit 0
      [ "${CRAFT_STEP_NAME}" = "BUILD" ] && $CRAFT_STAGE/patches/patch.sh
      craftctl default
    override-build: *arch-restrict
    override-stage: *arch-restrict
    override-prime: *arch-restrict
    build-snaps: *go
    build-packages:
      - make
    organize:
      bin: usr/bin/
    stage:
      - usr/bin/nvidia-container-*
      - usr/bin/nvidia-ctk

  libnvidia-container:
    plugin: make
    source: https://github.com/NVIDIA/libnvidia-container.git
    source-tag: v1.13.5
    source-depth: 1
    override-pull: *arch-restrict
    override-build: *arch-restrict
    override-stage: *arch-restrict
    override-prime: *arch-restrict
    after: [wrapper-scripts]
    build-packages:
      - bmake
      - curl
      - libelf-dev
      - libcap-dev
    # Paths taken from upstream packaging #
    organize:
      usr/local/bin/nvidia-container-cli: usr/bin/nvidia-container-cli
      usr/local/lib: usr/lib/${CRAFT_ARCH_TRIPLET}/
    prime:
      - usr/bin/nvidia-container-cli*
      - usr/lib/${CRAFT_ARCH_TRIPLET}/libnvidia-container*.so*

  tini:
    plugin: cmake
    source: https://github.com/krallin/tini.git
    source-type: git
    # from https://github.com/moby/moby/blob/v24.0.5/hack/dockerfile/install/tini.installer
    source-tag: v0.19.0
    source-depth: 1
    organize:
      'usr/local/bin/tini-static': bin/docker-init
    build-packages:
      - build-essential
    prime:
      - -usr/local/bin/tini

  docker-cli:
    plugin: make
    build-snaps: *go
    source: https://github.com/docker/cli.git
    source-tag: v24.0.5
    source-depth: 1
    override-build: |
      # docker build specific environment variables
      export VERSION=$(craftctl get version)
      export DOCKER_GITCOMMIT=$(git rev-parse --short HEAD)
      export GITCOMMIT=$DOCKER_GITCOMMIT
      export DISABLE_WARN_OUTSIDE_CONTAINER=1

      # setup the go build environment for docker-cli
      . $CRAFT_STAGE/bin/go-build-helper.sh
      gopartbootstrap github.com/docker/cli

      # build the docker cli binary
      unset LDFLAGS
      make dynbinary

      install -d "$CRAFT_PART_INSTALL/bin"
      install -T build/docker "$CRAFT_PART_INSTALL/bin/docker"
      install -T contrib/completion/bash/docker "$CRAFT_PART_INSTALL/bin/docker-completion.sh"
    after: [wrapper-scripts]
    stage-packages:
      - git

  buildx:
    plugin: nil
    source: https://github.com/docker/buildx.git
    # https://github.com/moby/moby/releases/tag/v24.0.5
    source-tag: v0.11.2
    source-depth: 1
    override-build: |
      export DESTDIR="$CRAFT_PART_INSTALL/usr/libexec/docker/cli-plugins"
      export VERSION=$(git describe --match 'v[0-9]*' --always --tags)
      export REVISION=$(git rev-parse HEAD)
      export GO_EXTRA_LDFLAGS="-s -w"
      ./hack/build
    build-snaps: *go

  compose-v2:
    plugin: make
    source: https://github.com/docker/compose.git
    # https://github.com/docker/docker-ce-packaging/blob/master/common.mk
    source-tag: v2.20.3
    source-depth: 1
    override-build: |
      make build

      install -d "$CRAFT_PART_INSTALL/usr/libexec/docker/cli-plugins"
      install -T bin/build/docker-compose "$CRAFT_PART_INSTALL/usr/libexec/docker/cli-plugins/docker-compose"
    build-snaps: *go

lint:
  ignore:
    # Change to unused-library, once available
    - library:
        - usr/lib/**/libltdl.so.*
        - usr/lib/**/libnvidia-container-go.so.*

# vim:set et ts=2 sw=2:
