name: docker
#title: Docker
version: '20.10.17'
summary: Docker container runtime
description: |
  Build and run container images with Docker.

  **Usage**

  * This build can only access files in the home directory. So Dockerfiles and all other files used in commands like `docker build`, `docker save` and `docker load` need to be in $HOME.
  * You can change the configuration of this build by modifying the files in `/var/snap/docker/current/`.
  * Additional certificates used by the Docker daemon to authenticate with registries need to be added in `/var/snap/docker/current/etc/docker/certs.d` (instead of `/etc/docker/certs.d`). This directory can be accessed by other snaps using the `docker-registry-certificates` content interface.

  **Running Docker as normal user**

  By default, Docker is only accessible with root privileges (`sudo`). If you want to use docker as a regular user, you need to add your user to the `docker` group.

      sudo addgroup --system docker
      sudo adduser $USER docker
      newgrp docker
      sudo snap disable docker
      sudo snap enable docker

  **Warning:** if you add your user to the `docker` group, it will have similar power as the `root` user. For details on how this impacts security in your system, see https://docs.docker.com/engine/security/#docker-daemon-attack-surface

  **Authors**

  This snap is built by Canonical based on source code published by Docker, Inc. It is not endorsed or published by Docker, Inc.

  Docker and the Docker logo are trademarks or registered trademarks of Docker, Inc. in the United States and/or other countries. Docker, Inc. and other parties may also have trademark rights in other terms used herein.
license: (Apache-2.0 AND MIT AND GPL-2.0)
grade: stable

base: core20
confinement: strict
assumes: [snapd2.50]

layout:
  /etc/docker:
    bind: $SNAP_DATA/etc/docker
  /etc/gitconfig:
    bind-file: $SNAP_DATA/etc/gitconfig
  /usr/lib/git-core:
    symlink: $SNAP/usr/lib/git-core
  /usr/share/git-core/templates:
    symlink: $SNAP/usr/share/git-core/templates
  /usr/libexec/docker/cli-plugins:
    symlink: $SNAP/usr/libexec/docker/cli-plugins

plugs:
  home:
    read: all
  removable-media:
  support:
    interface: docker-support
  privileged:
    interface: docker-support
    privileged-containers: true
  docker-cli:
    interface: docker
slots:
  docker-daemon:
    interface: docker
  docker-executables:
    content: docker-executables
    interface: content
    read:
      - .
  docker-registry-certificates:
    content: docker-registry-certificates
    interface: content
    write:
      - $SNAP_DATA/etc/docker/certs.d

apps:
  docker:
    command: bin/docker
    completer: bin/docker-completion.sh
    plugs:
      - docker-cli
      - network
      - home
      - removable-media

  dockerd:
    command: bin/dockerd-wrapper
    daemon: simple
    plugs:
      - firewall-control
      - home
      - log-observe
      - network-bind
      - network-control
      - privileged
      - support
    slots:
      - docker-daemon

  compose:
    command: bin/docker-compose
    plugs:
      - docker-cli
      - network
      - home
  machine:
    command: bin/docker-machine
    plugs:
      - docker-cli
      - network
      - home
      - network-bind
  help:
    command: bin/help

parts:
  wrapper-scripts:
    plugin: dump
    source: .
    stage-packages:
      - mount
    stage:
      - bin/*
      - dockerd-patches/*
      - config/daemon.json
    prime:
      - -bin/prep-dockerd-build.sh
      - -bin/go-build-helper.sh
      - -dockerd-patches/*
      - bin/*
      - config/daemon.json

  engine:
    plugin: make
    source: https://github.com/moby/moby.git
    source-tag: v20.10.17
    source-depth: 1
    override-build: |
      # docker build specific environment variables
      export VERSION=$SNAPCRAFT_PROJECT_VERSION
      export DOCKER_GITCOMMIT=$(git rev-parse --short HEAD)
      export GITCOMMIT=$DOCKER_GITCOMMIT
      export DISABLE_WARN_OUTSIDE_CONTAINER=1

      # this patches the dockerd sources
      . "$SNAPCRAFT_STAGE/bin/prep-dockerd-build.sh"

      # setup the go build environment for docker/docker
      . "$SNAPCRAFT_STAGE/bin/go-build-helper.sh"
      gopartbootstrap github.com/docker/docker

      # build the dockerd binary
      ./hack/make.sh dynbinary

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T "$GOPATH/src/github.com/docker/docker/bundles/dynbinary-daemon/dockerd" "$SNAPCRAFT_PART_INSTALL/bin/dockerd"
    # https://github.com/moby/moby/blob/v20.10.17/Dockerfile.simple (Docker-supported Go version for Engine)
    build-snaps: &go ['go/1.18/stable']
    # we get weird behavior if we mix/match Go versions throughout this one snapcraft.yml, so we use a YAML reference here to ensure we're always consistent throughout
    after: [wrapper-scripts]
    build-packages:
      - btrfs-progs
      - gcc
      - git
      - libc6-dev
      - libdevmapper-dev
      - libltdl-dev
      - libsystemd-dev
      - patch
      - pkg-config
    stage-packages:
      - git
      - libltdl7
      - pigz
      - xz-utils
      - zfsutils-linux

  containerd:
    plugin: go
    source: https://github.com/containerd/containerd.git
    # from https://github.com/docker/docker/blob/v20.10.17/hack/dockerfile/install/containerd.installer
    source-tag: v1.6.6
    override-build: |
      make GIT_COMMIT= GIT_BRANCH= LDFLAGS=

      rm bin/containerd-stress

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -t "$SNAPCRAFT_PART_INSTALL/bin" bin/containerd* bin/ctr
    go-channel: &gochannel '1.18/stable'
    build-packages:
      - make
      - libbtrfs-dev

  runc:
    plugin: go
    source: https://github.com/opencontainers/runc.git
    # from https://github.com/docker/docker/blob/v20.10.17/hack/dockerfile/install/runc.installer
    source-tag: v1.1.2
    override-build: |
      make BUILDTAGS='seccomp apparmor selinux' COMMIT=

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T runc "$SNAPCRAFT_PART_INSTALL/bin/runc"
    go-channel: *gochannel
    build-packages:
      - libapparmor-dev
      - libseccomp-dev
      - make

  libnetwork:
    plugin: make
    source: https://github.com/docker/libnetwork.git
    # from https://github.com/docker/docker/blob/v20.10.17/hack/dockerfile/install/proxy.installer
    source-commit: f6ccccb1c082a432c2a5814aaedaca56af33d9ea
    override-build: |
      # setup the go build environment for libnetwork
      . "$SNAPCRAFT_STAGE/bin/go-build-helper.sh"
      gopartbootstrap github.com/docker/libnetwork

      make build-local

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T bin/docker-proxy "$SNAPCRAFT_PART_INSTALL/bin/docker-proxy"
      install -T bin/dnet "$SNAPCRAFT_PART_INSTALL/bin/dnet"
    build-snaps: *go
    after: [wrapper-scripts]
    build-packages:
      - iptables
      - make

  tini:
    plugin: cmake
    source: https://github.com/krallin/tini.git
    source-type: git
    # from https://github.com/docker/docker/blob/v20.10.17/hack/dockerfile/install/tini.installer
    source-tag: v0.19.0
    organize:
      'bin/tini-static': bin/docker-init
    build-packages:
      - build-essential
    prime:
      - -bin/tini

  docker-cli:
    plugin: make
    # https://github.com/docker/cli/tree/v20.10.17/dockerfiles (Docker-supported Go version for CLI)
    build-snaps: *go
    source: https://github.com/docker/cli.git
    source-tag: v20.10.17
    override-build: |
      # docker build specific environment variables
      export VERSION=$SNAPCRAFT_PROJECT_VERSION
      export DOCKER_GITCOMMIT=$(git rev-parse --short HEAD)
      export GITCOMMIT=$DOCKER_GITCOMMIT
      export DISABLE_WARN_OUTSIDE_CONTAINER=1

      # setup the go build environment for docker-cli
      . $SNAPCRAFT_STAGE/bin/go-build-helper.sh
      gopartbootstrap github.com/docker/cli

      # build the docker cli binary
      cd $GOPATH/src/github.com/docker/cli
      unset LDFLAGS
      make dynbinary

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T "$GOPATH/src/github.com/docker/cli/build/docker" "$SNAPCRAFT_PART_INSTALL/bin/docker"
      install -T "$GOPATH/src/github.com/docker/cli/contrib/completion/bash/docker" "$SNAPCRAFT_PART_INSTALL/bin/docker-completion.sh"
    after: [wrapper-scripts]
    stage-packages:
      - git

  buildx:
    plugin: go
    source: https://github.com/docker/buildx.git
    # https://github.com/docker/buildx/releases
    source-tag: v0.8.2
    override-build: |
      # https://github.com/docker/buildx/blob/v0.8.2/Dockerfile
      PKG='github.com/docker/buildx'
      VERSION=$(git describe --match 'v[0-9]*' --always --tags)
      REVISION=$(git rev-parse HEAD)
      export CGO_ENABLED=0
      go build -ldflags "-w -s -X ${PKG}/version.Version=${VERSION} -X ${PKG}/version.Revision=${REVISION} -X ${PKG}/version.Package=${PKG}" -o ./buildx ./cmd/buildx

      install -d "$SNAPCRAFT_PART_INSTALL/usr/libexec/docker/cli-plugins"
      install -T buildx "$SNAPCRAFT_PART_INSTALL/usr/libexec/docker/cli-plugins/docker-buildx"
    go-channel: *gochannel

  compose-v2:
    plugin: go
    source: https://github.com/docker/compose.git
    # https://github.com/docker/compose/releases
    source-tag: v2.5.0
    override-build: |
      go get golang.org/x/net@v0.7.0
      go mod tidy -go=1.16 && go mod tidy -go=1.17
      make -f builder.Makefile

      install -d "$SNAPCRAFT_PART_INSTALL/usr/libexec/docker/cli-plugins"
      install -T bin/docker-compose "$SNAPCRAFT_PART_INSTALL/usr/libexec/docker/cli-plugins/docker-compose"
      # TODO remove "compose:" below and add a symlink from "$SNAPCRAFT_PART_INSTALL/bin/docker-compose" to this plugin (once v1 is fully EOL)
    go-channel: *gochannel
    build-packages:
      - make

  compose:
    plugin: python
    # https://github.com/docker/compose/blob/1.29.2/setup.py (Docker-supported Python versions)
    source: https://github.com/docker/compose.git
    source-tag: 1.29.2
    source-depth: 1
    stage:
      - -lib/python3.6/site-packages/wheel*
    build-packages:
      - libffi-dev
      # for "cryptography" on non-wheel arches
      - rustc
      - cargo
      - libssl-dev

  # TODO figure out what we need to do to axe this -- it's totally 100% dead
  machine:
    plugin: make
    source: https://github.com/docker/machine.git
    source-tag: v0.16.2
    source-depth: 1
    override-build: |
      # setup the go build environment for docker machine
      . "$SNAPCRAFT_STAGE/bin/go-build-helper.sh"
      gopartbootstrap github.com/docker/machine

      make build

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T bin/docker-machine "$SNAPCRAFT_PART_INSTALL/bin/docker-machine"
    # https://github.com/docker/machine/blob/v0.16.2/Dockerfile (Docker-supported Go version for Machine)
    build-snaps: *go
    after: [wrapper-scripts]

# vim:set et ts=2 sw=2:
