name: docker
#title: Docker
version: '19.03.13'
summary: Docker container runtime
description: |
  Build and run container images with Docker.

  **Usage**

  * This build can only access files in the home directory. So Dockerfiles and all other files used in commands like `docker build`, `docker save` and `docker load` need to be in $HOME.
  * You can change the configuration of this build by modifying the files in `/var/snap/docker/current/`.
  * Additional certificates used by the Docker daemon to authenticate with registries need to be added in `/var/snap/docker/common/etc/certs.d` (instead of `/etc/docker/certs.d`).

  **Running Docker as normal user**

  By default, Docker is only accessible with root privileges (`sudo`). If you want to use docker as a regular user, you need to add your user to the `docker` group.

      sudo addgroup --system docker
      sudo adduser $USER docker
      newgrp docker
      sudo snap disable docker
      sudo snap enable docker

  **Warning:** if you add your user to the `docker` group, it will have similar power as the `root` user. For details on how this impacts security in your system, see https://docs.docker.com/engine/security/#docker-daemon-attack-surface

  **Authors**

  This snap is built by Canonical based on source code published by Docker, Inc. It is not endorsed or published by Docker, Inc.

  Docker and the Docker logo are trademarks or registered trademarks of Docker, Inc. in the United States and/or other countries. Docker, Inc. and other parties may also have trademark rights in other terms used herein.
license: (Apache-2.0 AND MIT AND GPL-2.0)
grade: stable

base: core18
confinement: strict
assumes: [snapd2.48.3]

layout:
  /etc/docker:
    bind: $SNAP_DATA/etc/docker

plugs:
  home:
    read: all
  removable-media:
  support:
    interface: docker-support
  privileged:
    interface: docker-support
    privileged-containers: true
  docker-cli:
    interface: docker
slots:
  docker-daemon:
    interface: docker
  docker-executables:
    content: docker-executables
    interface: content
    read:
      - .

apps:
  docker:
    command: docker
    environment: &ugh-buildkit-git
      GIT_TEMPLATE_DIR: $SNAP/share/git-core/templates
      GIT_CONFIG_NOSYSTEM: 'true'
      GIT_EXEC_PATH: $SNAP/libexec/git-core
      GIT_TEXTDOMAINDIR: $SNAP/usr/share/locale
    completer: bin/docker-completion.sh
    plugs:
      - docker-cli
      - network
      - home
      - removable-media

  dockerd:
    command: dockerd-wrapper
    environment: *ugh-buildkit-git # buildkit runs "git" in the dockerd context instead of the CLI context like it was previously switched to, so we unfortunately need our GIT_* environment variables in both places
    daemon: simple
    plugs:
      - firewall-control
      - home
      - log-observe
      - network-bind
      - network-control
      - privileged
      - support
    slots:
      - docker-daemon

  compose:
    command: docker-compose
    plugs:
      - docker-cli
      - network
      - home
  machine:
    command: docker-machine
    plugs:
      - docker-cli
      - network
      - home
      - network-bind
  help:
    command: help

parts:
  wrapper-scripts:
    plugin: dump
    source: .
    stage-packages:
      - mount
    stage:
      - bin/*
      - dockerd-patches/*
      - config/daemon.json
    prime:
      - -bin/prep-dockerd-build.sh
      - -bin/go-build-helper.sh
      - -dockerd-patches/*
      - bin/*
      - config/daemon.json

  docker-cli:
    plugin: make
    # https://github.com/docker/cli/tree/v19.03.13/dockerfiles (Docker-supported Go version for CLI)
    build-snaps: ['go/1.13/stable']
    source: https://github.com/docker/cli.git
    source-tag: v19.03.13
    override-build: |
      # docker build specific environment variables
      export VERSION=$SNAPCRAFT_PROJECT_VERSION
      export DOCKER_GITCOMMIT=$(git rev-parse --short HEAD)
      export GITCOMMIT=$DOCKER_GITCOMMIT
      export DISABLE_WARN_OUTSIDE_CONTAINER=1

      # setup the go build environment for docker-cli
      . $SNAPCRAFT_STAGE/bin/go-build-helper.sh
      gopartbootstrap github.com/docker/cli

      # build the docker cli binary
      cd $GOPATH/src/github.com/docker/cli
      unset LDFLAGS
      make dynbinary

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T "$GOPATH/src/github.com/docker/cli/build/docker" "$SNAPCRAFT_PART_INSTALL/bin/docker"
      install -T "$GOPATH/src/github.com/docker/cli/contrib/completion/bash/docker" "$SNAPCRAFT_PART_INSTALL/bin/docker-completion.sh"

  engine:
    plugin: make
    source: https://github.com/moby/moby.git
    source-tag: v19.03.13
    source-depth: 1
    override-build: |
      # docker build specific environment variables
      export VERSION=$SNAPCRAFT_PROJECT_VERSION
      export DOCKER_GITCOMMIT=$(git rev-parse --short HEAD)
      export GITCOMMIT=$DOCKER_GITCOMMIT
      export DISABLE_WARN_OUTSIDE_CONTAINER=1

      # this patches the dockerd sources
      . "$SNAPCRAFT_STAGE/bin/prep-dockerd-build.sh"

      # setup the go build environment for docker/docker
      . "$SNAPCRAFT_STAGE/bin/go-build-helper.sh"
      gopartbootstrap github.com/docker/docker

      # build the dockerd binary
      ./hack/make.sh dynbinary

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T "$GOPATH/src/github.com/docker/docker/bundles/dynbinary-daemon/dockerd" "$SNAPCRAFT_PART_INSTALL/bin/dockerd"
    # https://github.com/moby/moby/blob/v19.03.13/Dockerfile.simple (Docker-supported Go version for Engine)
    build-snaps: ['go/1.13/stable']
    after: [wrapper-scripts]
    build-packages:
      - btrfs-tools
      - gcc
      - git
      - libc6-dev
      - libdevmapper-dev
      - libltdl-dev
      - libsystemd-dev
      - patch
      - pkg-config
    stage-packages:
      - zfsutils-linux
      - aufs-tools
      - libltdl7

  # this part is so that things like `docker build -t foobar github.com/foo/bar` work
  git:
    source: https://github.com/git/git.git
    source-type: git
    source-tag: v2.26.2
    source-depth: 1
    plugin: autotools
    configflags:
      - --with-curl
      - --with-expat
    build-packages:
      - gettext
      - libssl-dev
      - libexpat1-dev
      - zlib1g-dev
    stage-packages:
      - gettext
      - libcurl3
      - libcurl4-openssl-dev

  containerd:
    plugin: make
    source: https://github.com/containerd/containerd.git
    # from : https://github.com/docker/docker-ce/blob/v19.03.13/components/engine/hack/dockerfile/install/containerd.installer
    source-commit: 8fba4e9a7d01810a393d5d25a3621dc101981175
    override-build: |
      # setup the go build environment for containerd
      . "$SNAPCRAFT_STAGE/bin/go-build-helper.sh"
      gopartbootstrap github.com/containerd/containerd

      make GIT_COMMIT= GIT_BRANCH= LDFLAGS=

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T bin/containerd "$SNAPCRAFT_PART_INSTALL/bin/containerd"
      install -T bin/containerd-shim "$SNAPCRAFT_PART_INSTALL/bin/containerd-shim"
      install -T bin/ctr "$SNAPCRAFT_PART_INSTALL/bin/ctr"
    build-snaps: ['go/1.13/stable']
    after: [wrapper-scripts]
    build-packages:
      - make

  runc:
    plugin: make
    source: https://github.com/opencontainers/runc.git
    # from https://github.com/docker/docker-ce/blob/v19.03.13/components/engine/hack/dockerfile/install/runc.installer
    source-commit: dc9208a3303feef5b3839f4323d9beb36df0a9dd
    override-build: |
      # setup the go build environment for runc
      . "$SNAPCRAFT_STAGE/bin/go-build-helper.sh"
      gopartbootstrap github.com/opencontainers/runc

      make BUILDTAGS='seccomp apparmor selinux' COMMIT=

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T runc "$SNAPCRAFT_PART_INSTALL/bin/runc"
    build-snaps: ['go/1.13/stable']
    after: [wrapper-scripts]
    build-packages:
      - libapparmor-dev
      - libseccomp-dev
      - make

  libnetwork:
    plugin: make
    source: https://github.com/docker/libnetwork.git
    # from https://github.com/docker/docker-ce/blob/v19.03.13/components/engine/hack/dockerfile/install/proxy.installer
    source-commit: 026aabaa659832804b01754aaadd2c0f420c68b6
    override-build: |
      # setup the go build environment for libnetwork
      . "$SNAPCRAFT_STAGE/bin/go-build-helper.sh"
      gopartbootstrap github.com/docker/libnetwork

      make build-local

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T bin/docker-proxy "$SNAPCRAFT_PART_INSTALL/bin/docker-proxy"
      install -T bin/dnet "$SNAPCRAFT_PART_INSTALL/bin/dnet"
    build-snaps: ['go/1.13/stable']
    after: [wrapper-scripts]
    build-packages:
      - iptables
      - make

  tini:
    plugin: cmake
    source: https://github.com/krallin/tini.git
    source-type: git
    # from https://github.com/docker/docker-ce/blob/v19.03.13/components/engine/hack/dockerfile/install/tini.installer
    source-commit: fec3683b971d9c3ef73f284f176672c44b448662
    organize:
      'bin/tini-static': bin/docker-init
    build-packages:
      - build-essential
    prime:
      - -bin/tini

  compose:
    plugin: python
    # https://github.com/docker/compose/blob/1.25.5/setup.py (Docker-supported Python versions)
    python-version: python3
    source: https://github.com/docker/compose.git
    source-tag: 1.25.5
    source-depth: 1
    build-packages:
      - libffi-dev

  machine:
    plugin: make
    source: https://github.com/docker/machine.git
    source-tag: v0.16.2
    source-depth: 1
    override-build: |
      # setup the go build environment for docker machine
      . "$SNAPCRAFT_STAGE/bin/go-build-helper.sh"
      gopartbootstrap github.com/docker/machine

      make build

      install -d "$SNAPCRAFT_PART_INSTALL/bin"
      install -T bin/docker-machine "$SNAPCRAFT_PART_INSTALL/bin/docker-machine"
    # https://github.com/docker/machine/blob/v0.16.2/Dockerfile (Docker-supported Go version for Machine)
    build-snaps: ['go/1.13/stable']
    after: [wrapper-scripts]

# vim:set et ts=2 sw=2:
